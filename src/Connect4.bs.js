// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var CS17SetupGame$Game = require("./CS17SetupGame.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function makeList(num, item) {
  if (num !== 0) {
    return {
            hd: item,
            tl: makeList(num - 1 | 0, item)
          };
  } else {
    return /* [] */0;
  }
}

function initialState(s) {
  var boardDims = CS17SetupGame$Game.parseBoardDims(s);
  var boardHeight = CS17SetupGame$Game.getBoardHeight(boardDims);
  var boardWidth = CS17SetupGame$Game.getBoardWidth(boardDims);
  return /* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          },
          _1: makeList(boardHeight, makeList(boardWidth, 0))
        };
}

function makeBoard(s) {
  var match = s._1;
  if (match) {
    return {
            hd: match.hd,
            tl: match.tl
          };
  } else {
    return Pervasives.failwith("other");
  }
}

function mainDiagonal(ma) {
  if (ma) {
    return {
            hd: List.hd(ma.hd),
            tl: mainDiagonal(List.map(List.tl, ma.tl))
          };
  } else {
    return /* [] */0;
  }
}

function gameStatus(inState) {
  return inState._0;
}

function otherPlayer(player) {
  if (player) {
    return /* P1 */0;
  } else {
    return /* P2 */1;
  }
}

function currentPlayer(inState) {
  var p = inState._0;
  if (typeof p === "number") {
    return Pervasives.failwith("");
  } else {
    return p._0;
  }
}

function makeMove(num) {
  return /* Move */{
          _0: num
        };
}

function checkNthSlot(num, lst) {
  return List.nth(lst, num) === 0;
}

function makeMoveList(_lst) {
  while(true) {
    var lst = _lst;
    if (!lst) {
      return /* [] */0;
    }
    var tl = lst.tl;
    var hd = lst.hd;
    if (hd === 0) {
      return {
              hd: List.length({
                    hd: hd,
                    tl: tl
                  }),
              tl: makeMoveList(tl)
            };
    }
    _lst = tl;
    continue ;
  };
}

CS17SetupGame$Game.checkExpect(makeMoveList({
          hd: 0,
          tl: {
            hd: 1,
            tl: {
              hd: 2,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          }
        }), {
      hd: 5,
      tl: {
        hd: 2,
        tl: {
          hd: 1,
          tl: /* [] */0
        }
      }
    }, "check makeMoveList");

CS17SetupGame$Game.checkExpect(makeMoveList({
          hd: 0,
          tl: {
            hd: 0,
            tl: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: /* [] */0
                }
              }
            }
          }
        }), {
      hd: 5,
      tl: {
        hd: 4,
        tl: {
          hd: 3,
          tl: {
            hd: 2,
            tl: {
              hd: 1,
              tl: /* [] */0
            }
          }
        }
      }
    }, "check makeMoveList all column open");

function legalMoves(inState) {
  var match = inState._1;
  if (match) {
    return List.map(makeMove, makeMoveList(match.hd));
  } else {
    return Pervasives.failwith("invalid game state");
  }
}

CS17SetupGame$Game.checkExpect(legalMoves(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: 0,
              tl: {
                hd: 0,
                tl: {
                  hd: 0,
                  tl: {
                    hd: 0,
                    tl: {
                      hd: 0,
                      tl: /* [] */0
                    }
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: {
                    hd: 3,
                    tl: {
                      hd: 4,
                      tl: {
                        hd: 5,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: /* Move */{
        _0: 5
      },
      tl: {
        hd: /* Move */{
          _0: 4
        },
        tl: {
          hd: /* Move */{
            _0: 3
          },
          tl: {
            hd: /* Move */{
              _0: 2
            },
            tl: {
              hd: /* Move */{
                _0: 1
              },
              tl: /* [] */0
            }
          }
        }
      }
    }, "legalMoves all column open");

function estimateValue(inState) {
  var match = inState._0;
  if (typeof match === "number") {
    return 0;
  } else if (match.TAG === /* Win */0) {
    if (match._0) {
      return -1;
    } else {
      return 1;
    }
  } else {
    return 0;
  }
}

function stringOfPlayer(p) {
  if (p) {
    return "P2";
  } else {
    return "P1";
  }
}

function stringOfState(inState) {
  var p = inState._0;
  if (typeof p === "number") {
    return "The game ends in a draw!";
  } else if (p.TAG === /* Win */0) {
    return (
            p._0 ? "P2" : "P1"
          ) + " wins!";
  } else {
    return "It is " + ((
              p._0 ? "P2" : "P1"
            ) + "'s turn.");
  }
}

function stringOfMove(inMove) {
  return String(inMove._0);
}

function moveOfString(str, param) {
  try {
    return /* Move */{
            _0: Caml_format.caml_int_of_string(str)
          };
  }
  catch (raw_msg){
    var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
    if (msg.RE_EXN_ID === "Failure") {
      return Pervasives.failwith("please pick an integer corresponding to the column you want to \n                    drop your piece! (0~6)");
    }
    throw msg;
  }
}

var Connect4 = {
  makeList: makeList,
  initialState: initialState,
  makeBoard: makeBoard,
  mainDiagonal: mainDiagonal,
  gameStatus: gameStatus,
  otherPlayer: otherPlayer,
  currentPlayer: currentPlayer,
  makeMove: makeMove,
  checkNthSlot: checkNthSlot,
  makeMoveList: makeMoveList,
  legalMoves: legalMoves,
  estimateValue: estimateValue,
  stringOfPlayer: stringOfPlayer,
  stringOfState: stringOfState,
  stringOfMove: stringOfMove,
  moveOfString: moveOfString
};

exports.Connect4 = Connect4;
/*  Not a pure module */
